/**
 * 
 */
package ru.custom.project.commands;

/**
 * @author denis
 * 
 * Загрузка символов пользовательского шрифта
 * Загрузка массива битовых данных произвольного набора символов
 * 
 * Формат загружаемых данных: <y><n1><n2>[<x><P(0)><P(1)>...<P(y-1)>]^(n2-n1+1)
 * y=16 (десятиричное)
 * 00<=n1<=n2<=FF
 * x=8
 * 
 * Описание:
 * y - определяет количество пикселей по вертикали загружаемого
 * символа. В устройстве вертикальный размер шрифта жестко фиксирован, 
 * в связи с чем данный параметр может принимать одно единственное
 * значение, равное 16 (десятиричное)
 * 
 * n1 - определяет код символа, начиная с которого будет загружаться 
 * массив битовых данных
 * 
 * n2 - определяет код последнего загружаемого символа. При n1=n2 будет
 * произведена загрузка одного единственного символа с соответствующим 
 * кодом
 * 
 * x - определяет количество пикселей по горизонтали загружаемого
 * символа. В устройстве горизонтальный размер шрифта жестко фиксирован,
 * в связи с че данный параметр может принимать одно единственное значение
 * равное 8
 * 
 * P(m) - загружаемый битовый образ пиксельной строки символа,
 * отображаемый слева направо в горизонтальном направлении в порядке
 * уменьшения битовой нумерации, где m - номер пиксельной строки,
 * отсчитываемый сверху вниз: 0<=m<=y-1. Размерность P в байтах
 * вычисляется по формуле: B=Int[(x+7)/8], составляя для устройства 1 байт
 * 
 * Загружаемый таким образом пользовательский шрифт сохраняется в памяти
 * устройства до перезагрузки
 * 
 */
public class UploadUserFontCommand extends AbstractPrinterCommand {

	private byte[] fontData;
	
	public UploadUserFontCommand(byte[] fontData) {
		super();
		this.fontData = fontData;
	}

	@Override
	public byte[] getCode() {
		return new byte[] {0x1B, 0x26};
	}
	
	@Override
	public byte[] getData() {
		return fontData;
	}

	public byte[] getFontData() {
		return fontData;
	}

	public void setFontData(byte[] fontData) {
		this.fontData = fontData;
	}
	

}
